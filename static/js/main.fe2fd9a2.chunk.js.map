{"version":3,"sources":["components/pages/landing/LandingPage.tsx","recoil/atoms/GameConfig.ts","recoil/effects/LocalStorage.ts","hooks/useLocalStorageRecoilState.ts","recoil/atoms/GameState.ts","components/pages/game-config/GameConfigPage.tsx","recoil/selectors/Progress.ts","recoil/selectors/Graph.ts","components/pages/game/Timer.tsx","components/pages/game/NumberPad.tsx","components/pages/game/Graph.tsx","components/common/NakedButton.tsx","components/common/IconButton.tsx","icons/backspace.svg","recoil/selectors/Health.ts","components/pages/game/History.tsx","components/pages/game/GamePage.tsx","App.tsx","index.tsx"],"names":["StyledDiv","styled","div","LandingPage","to","ProgressMode","localStorageEffect","key","setSelf","onSet","savedValue","JSON","parse","localStorage","getItem","newValue","DefaultValue","removeItem","setItem","stringify","progressModeAtom","atom","default","Sinks","effects_UNSTABLE","progressGoalAtom","putterCountAtom","rollingAverageDepthAtom","graphDepthAtom","targetAtom","useLocalStorageRecoilState","useRecoilState","value","setValue","useState","loadedFromCache","setLoadedFromCache","useEffect","storedValue","useMemo","timeElapsedAtom","historyAtom","GameConfigPage","progressMode","setProgressMode","progressCount","setProgressCount","putterCount","setPutterCount","resetTimeElapsed","useResetRecoilState","resetHistory","name","id","onChange","e","target","Throws","type","parseInt","progressSelector","selector","get","history","reduce","accumulator","currentValue","length","graphSelector","rollingAverageDepth","adjustedAvgDept","Math","ceil","graphData","i","start","max","localHistory","slice","nominator","denominator","forEach","index","weight","push","formatTime","time","secondsElapsed","floor","minutesElapsed","remainderSeconds","formattedSeconds","Timer","timeElapsed","setTimeElapsed","progress","useRecoilValue","progressGoal","graph","Date","now","lastTickTime","setLastTickTime","timeout","setTimeout","clearTimeout","round","NumberPad","setHistory","useSetRecoilState","Array","keys","map","onClick","Graph","data","graphDepth","width","window","screen","getXCoord","toFixed","getYCoord","GRAPH_PADDING","targetY","points","getCoord","join","height","x1","y1","x2","y2","stroke","strokeDasharray","strokeWidth","fill","min","cx","cy","r","button","StyledNakedButton","NakedButton","IconButton","title","src","alt","healthSelector","health","props","$health","History","className","BackspaceIcon","oldHistory","GamePage","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe2fd9a2.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst StyledDiv = styled.div``;\n\nexport default function LandingPage() {\n  return (\n    <StyledDiv>\n      <Link to=\"/game-config\">Start</Link>\n    </StyledDiv>\n  );\n}\n","import { atom } from \"recoil\";\nimport { localStorageEffect } from \"../effects/LocalStorage\";\n\nexport enum ProgressMode {\n  Sinks = \"SINKS\",\n  Throws = \"THROWS\",\n}\n\nexport const progressModeAtom = atom<ProgressMode>({\n  key: \"progress-mode\",\n  default: ProgressMode.Sinks,\n  effects_UNSTABLE: [localStorageEffect(\"progress-mode\")],\n});\n\nexport const progressGoalAtom = atom<number>({\n  key: \"progress-goal\",\n  default: 100,\n  effects_UNSTABLE: [localStorageEffect(\"progress-goal\")],\n});\n\nexport const putterCountAtom = atom<number>({\n  key: \"putter-count\",\n  default: 3,\n  effects_UNSTABLE: [localStorageEffect(\"putter-count\")],\n});\n\nexport const rollingAverageDepthAtom = atom<number>({\n  key: \"rolling-average-depth\",\n  default: 30,\n  effects_UNSTABLE: [localStorageEffect(\"rolling-average-depth\")],\n});\n\nexport const graphDepthAtom = atom<number>({\n  key: \"graph-depth\",\n  default: 30,\n  effects_UNSTABLE: [localStorageEffect(\"graph-depth\")],\n});\n\nexport const targetAtom = atom<number>({\n  key: \"target\",\n  default: 0.8,\n  effects_UNSTABLE: [localStorageEffect(\"target\")],\n});\n","import { DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  (key: string) =>\n  ({\n    setSelf,\n    onSet,\n  }: {\n    setSelf: (value: any) => void;\n    onSet: (effect: (newValue: any) => void) => void;\n  }) => {\n    const savedValue = JSON.parse(localStorage.getItem(key) ?? \"null\");\n\n    if (savedValue !== null) {\n      setSelf(savedValue);\n    }\n\n    onSet((newValue: any) => {\n      if (newValue instanceof DefaultValue) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newValue));\n      }\n    });\n  };\n","import { RecoilState, SetterOrUpdater, useRecoilState } from \"recoil\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport default function useLocalStorageRecoilState<T>(\n  atom: RecoilState<T>\n): [T, SetterOrUpdater<T>] {\n  const [value, setValue] = useRecoilState<T>(atom);\n  const [loadedFromCache, setLoadedFromCache] = useState(false);\n\n  useEffect(() => {\n    const storedValue = JSON.parse(localStorage.getItem(atom.key) ?? \"null\");\n    if (storedValue) {\n      setValue(storedValue);\n    }\n    setLoadedFromCache(true);\n  }, [atom.key, setValue]);\n\n  useEffect(() => {\n    if (!loadedFromCache) {\n      return;\n    }\n\n    localStorage.setItem(atom.key, JSON.stringify(value));\n  }, [atom.key, value, loadedFromCache]);\n\n  return useMemo(() => [value, setValue], [value, setValue]);\n}\n","import { atom } from \"recoil\";\nimport { localStorageEffect } from \"../effects/LocalStorage\";\n\nexport const timeElapsedAtom = atom({\n  key: \"time-elapsed\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(\"time-elapsed\")],\n});\n\nexport const historyAtom = atom<number[]>({\n  key: \"history\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect(\"history\")],\n});\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  progressGoalAtom,\n  ProgressMode,\n  progressModeAtom,\n  putterCountAtom,\n} from \"../../../recoil/atoms/GameConfig\";\nimport useLocalStorageRecoilState from \"../../../hooks/useLocalStorageRecoilState\";\nimport { Link } from \"react-router-dom\";\nimport { historyAtom, timeElapsedAtom } from \"../../../recoil/atoms/GameState\";\nimport { useResetRecoilState } from \"recoil\";\n\nconst StyledDiv = styled.div``;\n\nexport default function GameConfigPage() {\n  const [progressMode, setProgressMode] =\n    useLocalStorageRecoilState<ProgressMode>(progressModeAtom);\n\n  const [progressCount, setProgressCount] =\n    useLocalStorageRecoilState<number>(progressGoalAtom);\n\n  const [putterCount, setPutterCount] =\n    useLocalStorageRecoilState<number>(putterCountAtom);\n\n  const resetTimeElapsed = useResetRecoilState(timeElapsedAtom);\n  const resetHistory = useResetRecoilState(historyAtom);\n\n  useEffect(() => {\n    resetTimeElapsed();\n    resetHistory();\n  }, [resetHistory, resetTimeElapsed]);\n\n  return (\n    <StyledDiv>\n      <div>\n        <span>I want to</span>\n        <select\n          name=\"progress-mode\"\n          id=\"progress-mode\"\n          value={progressMode}\n          onChange={(e) => {\n            setProgressMode(e.target.value as ProgressMode);\n          }}\n        >\n          <option value={ProgressMode.Sinks}>sink</option>\n          <option value={ProgressMode.Throws}>throw</option>\n        </select>\n        <input\n          name=\"progress-count\"\n          id=\"progress-count\"\n          type=\"number\"\n          value={progressCount}\n          onChange={(e) => {\n            setProgressCount(parseInt(e.target.value));\n          }}\n        />\n        <span>putts.</span>\n      </div>\n      <div>\n        <span>I have</span>\n        <input\n          name=\"putter-count\"\n          id=\"putter-count\"\n          type=\"number\"\n          value={putterCount}\n          onChange={(e) => {\n            setPutterCount(parseInt(e.target.value));\n          }}\n        />\n        <span>putters.</span>\n      </div>\n      <Link to=\"/game\">Let's putt!</Link>\n    </StyledDiv>\n  );\n}\n","import { selector } from \"recoil\";\nimport {\n  ProgressMode,\n  progressModeAtom,\n  putterCountAtom,\n} from \"../atoms/GameConfig\";\nimport { historyAtom } from \"../atoms/GameState\";\n\nexport const progressSelector = selector({\n  key: \"progress\",\n  get: ({ get }) => {\n    const progressMode = get(progressModeAtom);\n    const history = get(historyAtom);\n    const putterCount = get(putterCountAtom);\n\n    switch (progressMode) {\n      case ProgressMode.Sinks:\n        return history.reduce(\n          (accumulator, currentValue) => accumulator + currentValue,\n          0\n        );\n      case ProgressMode.Throws:\n        return history.length * putterCount;\n    }\n  },\n});\n","import { selector } from \"recoil\";\nimport { historyAtom } from \"../atoms/GameState\";\nimport { putterCountAtom, rollingAverageDepthAtom } from \"../atoms/GameConfig\";\n\nexport const graphSelector = selector({\n  key: \"graph\",\n  get: ({ get }) => {\n    const history = get(historyAtom);\n    const rollingAverageDepth = get(rollingAverageDepthAtom);\n    const putterCount = get(putterCountAtom);\n\n    const adjustedAvgDept = Math.ceil(rollingAverageDepth / putterCount);\n\n    const graphData = [];\n\n    for (let i = 0; i < history.length; i++) {\n      const start = Math.max(0, i - adjustedAvgDept + 1);\n      const localHistory = history.slice(start, i + 1);\n\n      let nominator = 0;\n      let denominator = 0;\n\n      localHistory.forEach((value, index) => {\n        const weight = (index + 1) / (localHistory.length + 1);\n        const percentage = value / putterCount;\n        nominator += percentage * weight;\n        denominator += weight;\n      });\n\n      graphData.push(nominator / denominator);\n    }\n\n    return graphData;\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { timeElapsedAtom } from \"../../../recoil/atoms/GameState\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { progressSelector } from \"../../../recoil/selectors/Progress\";\nimport { progressGoalAtom } from \"../../../recoil/atoms/GameConfig\";\nimport { graphSelector } from \"../../../recoil/selectors/Graph\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  margin: 8px;\n  padding: 8px 16px;\n  background: radial-gradient(100% 100% at 50% 50%, #9eba3a 0%, #89ad33 100%),\n    #89ad33;\n  box-shadow: 0 0 16px inset rgba(0, 0, 0, 0.62);\n  border-radius: 4px;\n  justify-content: space-between;\n  font-weight: bold;\n  font-size: 40px;\n  color: #232d06;\n  font-family: \"VT323\", monospace;\n  text-shadow: 1px 1px #425210;\n  white-space: pre-wrap;\n  border: 4px inset #75991e;\n`;\n\nfunction formatTime(time: number): string {\n  const secondsElapsed = Math.floor(time / 1000);\n  const minutesElapsed = Math.floor(secondsElapsed / 60);\n  const remainderSeconds = secondsElapsed % 60;\n\n  const formattedSeconds =\n    remainderSeconds < 10 ? `0${remainderSeconds}` : remainderSeconds;\n\n  return `${minutesElapsed}${time % 1000 < 500 ? \":\" : \" \"}${formattedSeconds}`;\n}\n\nexport default function Timer() {\n  const [timeElapsed, setTimeElapsed] = useRecoilState(timeElapsedAtom);\n  const progress = useRecoilValue(progressSelector);\n  const progressGoal = useRecoilValue(progressGoalAtom);\n  const graph = useRecoilValue(graphSelector);\n\n  const [lastTickTime, setLastTickTime] = useState(Date.now());\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      const now = Date.now();\n      const timeSinceLastTick = now - lastTickTime;\n\n      setTimeElapsed(timeElapsed + timeSinceLastTick);\n      setLastTickTime(now);\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [setTimeElapsed, timeElapsed, lastTickTime]);\n\n  return (\n    <StyledDiv>\n      <div>{formatTime(timeElapsed)}</div>\n      <div>{`${progress}/${progressGoal}`}</div>\n      <div>{`${Math.round(graph[graph.length - 1] * 100)}%`}</div>\n    </StyledDiv>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { putterCountAtom } from \"../../../recoil/atoms/GameConfig\";\nimport { historyAtom } from \"../../../recoil/atoms/GameState\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 4px;\n  max-height: 50vh;\n  overflow: auto;\n\n  button {\n    font-family: \"Staatliches\", sans-serif;\n    height: 80px;\n    flex: 1;\n    min-width: calc(33.333% - 8px);\n    margin: 4px;\n    font-size: 40px;\n    font-weight: bold;\n    border-radius: 4px;\n    background: radial-gradient(\n        80% 80% at 50% 50%,\n        rgba(255, 255, 255, 0.08) 0%,\n        rgba(0, 0, 0, 0) 100%\n      ),\n      #1e1e21;\n    color: #fcf3e2;\n    border-style: outset;\n    border-width: 8px;\n    text-shadow: 0 0 12px black, 1px 1px 0 #8d847e;\n    border-color: #44444b;\n\n    &:active {\n      border-width: 12px;\n      background: radial-gradient(\n          79.35% 79.35% at 50% 50%,\n          rgba(255, 255, 255, 0.04) 0%,\n          rgba(0, 0, 0, 0) 100%\n        ),\n        #151518;\n    }\n\n    transition: border-width 0.25s cubic-bezier(0.33, 1, 0.68, 1),\n      background 0.25s cubic-bezier(0.33, 1, 0.68, 1);\n  }\n`;\n\nexport default function NumberPad() {\n  const [putterCount] = useRecoilState(putterCountAtom);\n  const setHistory = useSetRecoilState(historyAtom);\n\n  return (\n    <StyledDiv>\n      {[...Array(putterCount + 1).keys()].map((i) => (\n        <button\n          key={i}\n          onClick={() => {\n            setHistory((history) => [...history, i]);\n          }}\n        >\n          {i}\n        </button>\n      ))}\n    </StyledDiv>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { useRecoilValue } from \"recoil\";\nimport { graphSelector } from \"../../../recoil/selectors/Graph\";\nimport {\n  graphDepthAtom,\n  putterCountAtom,\n  targetAtom,\n} from \"../../../recoil/atoms/GameConfig\";\nimport { historyAtom } from \"../../../recoil/atoms/GameState\";\n\nconst StyledDiv = styled.div`\n  flex: 1;\n  margin: 0 8px;\n  background-color: #e3d0bc;\n  border-radius: 4px;\n  padding: 8px 0;\n`;\n\nconst GRAPH_PADDING = 4;\n\nexport default function Graph() {\n  const data = useRecoilValue(graphSelector);\n  const target = useRecoilValue(targetAtom);\n  const history = useRecoilValue(historyAtom);\n  const putterCount = useRecoilValue(putterCountAtom);\n  const graphDepth = useRecoilValue(graphDepthAtom);\n\n  const width = window.screen.width - 16;\n  const height = 300;\n\n  function getXCoord(index: number): string {\n    return ((width / graphDepth) * index).toFixed(1);\n  }\n\n  function getYCoord(value: number): string {\n    return (GRAPH_PADDING + height - value * height).toFixed(1);\n  }\n\n  function getCoord(value: number, index: number): string {\n    return `${getXCoord(index)},${getYCoord(value)}`;\n  }\n\n  const targetY = getYCoord(target);\n\n  const points = data\n    .slice(-graphDepth)\n    .map((value, index) => getCoord(value, index))\n    .join(\" \");\n\n  return (\n    <StyledDiv>\n      <svg width={width} height={height + GRAPH_PADDING * 2}>\n        <line\n          x1={0}\n          y1={targetY}\n          x2={width}\n          y2={targetY}\n          stroke=\"gray\"\n          strokeDasharray=\"12 8\"\n          strokeWidth=\"3\"\n        />\n        <polyline points={points} fill=\"none\" stroke=\"black\" strokeWidth=\"3\" />\n        {history.slice(-graphDepth).map((value, index) => (\n          <Fragment key={`trade-dot-${index}`}>\n            <line\n              key={`trace-${index}`}\n              x1={getXCoord(index)}\n              y1={getYCoord(value / putterCount)}\n              x2={getXCoord(index)}\n              y2={getYCoord(\n                data[data.length - Math.min(graphDepth, history.length) + index]\n              )}\n              stroke=\"gray\"\n              strokeDasharray=\"8\"\n            />\n            <circle\n              key={`dot-${index}`}\n              cx={getXCoord(index)}\n              cy={getYCoord(value / putterCount)}\n              fill=\"gray\"\n              r=\"3\"\n            />\n          </Fragment>\n        ))}\n      </svg>\n    </StyledDiv>\n  );\n}\n","import styled from \"styled-components\";\n\nexport default styled.button`\n  background: none;\n  border: none;\n  padding: 0;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport NakedButton from \"./NakedButton\";\n\nconst StyledNakedButton = styled(NakedButton)`\n  margin-bottom: -4px;\n\n  img {\n    width: 40px;\n    height: 40px;\n  }\n`;\n\ninterface IconButtonProps {\n  title: string;\n  src: string;\n  onClick: () => void;\n}\n\nexport default function IconButton({ title, src, onClick }: IconButtonProps) {\n  return (\n    <StyledNakedButton title={title} onClick={onClick}>\n      <img src={src} alt=\"\" />\n    </StyledNakedButton>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/backspace.2eabbca1.svg\";","import { selector } from \"recoil\";\nimport { graphSelector } from \"./Graph\";\nimport { targetAtom } from \"../atoms/GameConfig\";\n\nconst HEALTH_CHANGE = 0.1;\n\nexport const healthSelector = selector({\n  key: \"health\",\n  get: ({ get }) => {\n    const graph = get(graphSelector);\n    const target = get(targetAtom);\n\n    let health = 0;\n\n    for (let i = 0; i < graph.length; i++) {\n      if (health <= -0.99 || health >= 0.99) {\n        health = 0;\n        continue;\n      }\n\n      if (graph[i] < target) {\n        health -= HEALTH_CHANGE;\n      } else {\n        health += HEALTH_CHANGE;\n      }\n    }\n\n    return health;\n  },\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { historyAtom } from \"../../../recoil/atoms/GameState\";\nimport IconButton from \"../../common/IconButton\";\nimport BackspaceIcon from \"../../../icons/backspace.svg\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { healthSelector } from \"../../../recoil/selectors/Health\";\n\ninterface StyledDivProps {\n  $health: number;\n}\n\nconst StyledDiv = styled.div<StyledDivProps>`\n  display: flex;\n  justify-content: flex-end;\n  overflow: hidden;\n  padding: 8px 8px 0 8px;\n\n  .health-bar-container {\n    margin-right: 8px;\n    flex: 1;\n    border-radius: 8px;\n    overflow: hidden;\n    display: flex;\n    background-color: lightblue;\n\n    .left-segment {\n      background-color: red;\n      flex: 1;\n      opacity: ${(props) => (props.$health < 0 ? 1 : 0)};\n      transform-origin: right;\n      transform: scaleX(${(props) => -props.$health});\n      transition: transform 0.25s cubic-bezier(0.33, 1, 0.68, 1);\n    }\n\n    .right-segment {\n      background-color: green;\n      flex: 1;\n      opacity: ${(props) => (props.$health > 0 ? 1 : 0)};\n      transform-origin: left;\n      transform: scaleX(${(props) => props.$health});\n      transition: transform 0.25s cubic-bezier(0.33, 1, 0.68, 1);\n    }\n  }\n`;\n\nexport default function History() {\n  const setHistory = useSetRecoilState(historyAtom);\n  const health = useRecoilValue(healthSelector);\n\n  return (\n    <StyledDiv $health={health}>\n      <div className=\"health-bar-container\">\n        <div className=\"left-segment\" />\n        <div className=\"right-segment\" />\n      </div>\n      <IconButton\n        title=\"Delete history entry\"\n        src={BackspaceIcon}\n        onClick={() => {\n          setHistory((oldHistory) =>\n            oldHistory.slice(0, oldHistory.length - 1)\n          );\n        }}\n      />\n    </StyledDiv>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Timer from \"./Timer\";\nimport NumberPad from \"./NumberPad\";\nimport Graph from \"./Graph\";\nimport History from \"./History\";\n\nconst StyledDiv = styled.div`\n  background: #381b1b;\n\n  .header {\n    font-family: \"Staatliches\", sans-serif;\n    letter-spacing: 4px;\n    background: radial-gradient(\n        200% 120% at 50% 50%,\n        rgba(0, 0, 0, 0) 0%,\n        rgba(0, 0, 0, 0.7) 100%\n      ),\n      #381b1b;\n    font-size: 28px;\n    font-weight: 700;\n    padding: 4px 8px;\n    color: #fcf3e2;\n    text-shadow: 0 0 12px black, 1px 1px 0 #8d847e;\n  }\n\n  .bottom-half {\n    background: radial-gradient(\n        80% 100% at 50% 50%,\n        rgba(0, 0, 0, 0) 0%,\n        rgba(0, 0, 0, 0.7) 100%\n      ),\n      #381b1b;\n  }\n\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n\nexport default function GamePage() {\n  return (\n    <StyledDiv>\n      <div className=\"header\">Puttometer</div>\n      <Graph />\n      <div className=\"bottom-half\">\n        <History />\n        <Timer />\n        <NumberPad />\n      </div>\n    </StyledDiv>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"./components/pages/landing/LandingPage\";\nimport GameConfigPage from \"./components/pages/game-config/GameConfigPage\";\nimport GamePage from \"./components/pages/game/GamePage\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/game-config\">\n          <GameConfigPage />\n        </Route>\n        <Route path=\"/game\">\n          <GamePage />\n        </Route>\n        <Route path=\"/\">\n          <LandingPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}